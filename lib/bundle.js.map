{"version":3,"sources":["webpack:///webpack/bootstrap cf6d3d3600412bb69ddc","webpack:///./lib/entry.js","webpack:///./lib/gameView.js","webpack:///./lib/game.js","webpack:///./lib/assetRepository.js","webpack:///./lib/assetPaths.js","webpack:///./lib/rotatingAsteroid.js","webpack:///./lib/asteroid.js","webpack:///./lib/util.js","webpack:///./lib/sprite.js","webpack:///./lib/movingObject.js","webpack:///./lib/constants.js","webpack:///./lib/ship.js","webpack:///./lib/bullet.js","webpack:///./lib/newSprites.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACVA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gCAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA,kBAAiB,wBAAwB;AACzC;AACA;AACA;;AAEA;AACA;AACA,oBAAmB,OAAO;AAC1B;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,qBAAoB;AACpB;AACA,IAAG;AACH,oBAAmB,OAAO;AAC1B;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,qBAAoB;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA;;AAEA;;AAEA;AACA,gDAA+C,mDAAmD;AAClG;;AAEA;AACA,gDAA+C,4DAA4D;AAC3G,EAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,kBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,kBAAiB,uBAAuB;AACxC;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kBAAiB,uBAAuB;AACxC;AACA;AACA;;AAEA;AACA;AACA,kBAAiB,uBAAuB;AACxC,oBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,8CAA6C,0BAA0B;AACvE;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA,IAAG;AACH;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;;;;;;;AC5UA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,kBAAiB,+BAA+B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACRA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC/CA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB;AAChB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;ACvDA;;AAEA;AACA,iCAAgC,+BAA+B;AAC/D;AACA;AACA,IAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAG;;AAEH;AACA,oBAAmB,WAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;;AAEA,cAAa;AACb;AACA;AACA;;AAEA;;AAEA;;;;;;;ACzEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;AC1EA;;AAEA;AACA,2DAA0D;AAC1D,0BAAyB;AACzB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;;AAEA;;AAEA;;;;;;;ACtEA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB;AAChB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB;AAChB;;AAEA;;;;;;;AC7JA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,8CAA6C,+CAA+C,EAAE,4BAA4B;AAC1H;AACA;AACA;AACA;;AAEA;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB;AACnB,IAAG;AACH;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap cf6d3d3600412bb69ddc\n **/","var GameView = require(\"./gameView\");\nvar AssetRepository = require('./assetRepository');\nvar AssetPaths = require('./assetPaths');\n\nfor (var path in AssetPaths) {\n    if (AssetPaths.hasOwnProperty(path)) {\n       AssetRepository.queueDownload(AssetPaths[path]);\n    }\n}\nvar gameView = new GameView();\nAssetRepository.downloadAll(gameView.gameIntro.bind(gameView));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/entry.js\n ** module id = 0\n ** module chunks = 0\n **/","var Game = require(\"./game\");\nvar AssetRepository = require(\"./assetRepository\");\nvar AssetPaths = require('./assetPaths');\nvar Util = require(\"./util\");\nvar Constants = require(\"./constants\");\n\nvar GameView = function() {\n  this.game = undefined;\n};\n\nGameView.prototype.gameIntro = function() {\n  //draw the background\n  var bgCanvas = document.getElementById('background');\n  bgCanvas.width = Constants.Game.DIM_X;\n  bgCanvas.height = Constants.Game.DIM_Y;\n  var bgCtx = bgCanvas.getContext('2d');\n  bgCtx.drawImage(AssetRepository.getAsset(AssetPaths.background), 0, 0, Constants.Game.DIM_X, Constants.Game.DIM_Y);\n\n  // canvas for game objects\n  var mainCanvas = document.getElementById(\"main-canvas\");\n  mainCanvas.width = Constants.Game.DIM_X;\n  mainCanvas.height = Constants.Game.DIM_Y;\n  var mainCtx = mainCanvas.getContext(\"2d\");\n\n  // canvas for the game controls\n  var controlsCanvas = document.getElementById(\"controls-canvas\");\n  controlsCanvas.width = Constants.Game.DIM_X;\n  controlsCanvas.height = Constants.Game.DIM_Y;\n  var controlsCtx = controlsCanvas.getContext(\"2d\");\n\n  //draw the Play Game button\n  var fontSize = 48;\n  controlsCtx.font = fontSize + \"px sans-serif\";\n  controlsCtx.fillStyle = \"white\";\n  var text = \"Play Game\";\n  controlsCtx.fillText(text, 50, Constants.Game.DIM_Y - 50);\n  var playGameButton = controlsCtx.measureText(text);\n\n  //draw the Controls\n  fontSize = 24;\n  controlsCtx.font = fontSize + \"px sans-serif\";\n  controlsCtx.fillStyle = \"white\";\n  text = \"Spacebar to shoot\";\n  controlsCtx.fillText(text, 750, Constants.Game.DIM_Y - 50);\n  text = \"Arrow keys to move\";\n  controlsCtx.fillText(text, 750, Constants.Game.DIM_Y - 20);\n\n  //draw Asteroids logo and text\n  fontSize = 75;\n  controlsCtx.font = fontSize + \"px sans-serif\";\n  text = \"Asteroids\";\n  var logo = controlsCtx.measureText(text);\n  controlsCtx.fillText(text, (Constants.Game.DIM_X - logo.width)*0.5, Constants.Game.DIM_Y*0.60 - fontSize*0.5);\n\n  this.game = new Game(bgCtx, mainCtx, controlsCtx);\n  this.start();\n\n  // click on Play Game button starts the game\n  controlsCanvas.onmousedown = function (e) {\n     var loc = Util.windowToCanvas(controlsCanvas, e.clientX, e.clientY);\n     if ((loc.x > 50) && (loc.x < playGameButton.width + 50)\n        && (loc.y > Constants.Game.DIM_Y - 50 - fontSize)\n        && (loc.y < Constants.Game.DIM_Y - 50)) {\n          this.game.startGame();\n        }\n  }.bind(this);\n};\n\nGameView.prototype.start = function() {\n  this.lastTime = 0;\n  requestAnimationFrame(this.animate.bind(this));\n};\n\nGameView.prototype.animate = function(time) {\n  var timeDelta = time - this.lastTime;\n\n  this.game.step(timeDelta, time);\n  this.game.draw(timeDelta);\n  this.lastTime = time;\n\n  //every call to animate requests causes another call to animate\n  requestAnimationFrame(this.animate.bind(this));\n};\n\nmodule.exports = GameView;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/gameView.js\n ** module id = 1\n ** module chunks = 0\n **/","var AssetRepository = require(\"./assetRepository\");\nvar AssetPaths = require(\"./assetPaths\");\nvar RotatingAsteroid = require(\"./rotatingAsteroid\");\nvar Util = require(\"./util\");\nvar Constants = require(\"./constants\");\nvar Sprite = require(\"./sprite\");\nvar Ship = require(\"./ship\");\nvar NewSprites = require(\"./newSprites\");\n\nvar Game = function(bgCtx, mainCtx, controlsCtx) {\n  this.bgCtx = bgCtx;\n  this.mainCtx = mainCtx;\n  this.controlsCtx = controlsCtx;\n\n  this.lives = Constants.Game.LIVES;\n  this.num_asteroids = 10;\n  this.asteroids = [];\n  this.asteroidChunks = [];\n  this.time = 0;\n  //this.ship = this.addShip(); //new Ship(this.randomPosition(), this);\n  this.bullets = [];\n  this.sprites = [];\n  this.score = 0;\n  this.gameStarted = false;\n  this.addAsteroids();\n};\n\nGame.prototype.startGame = function() {\n  this.gameStarted = true;\n  this.score = 0;\n  this.lives = Constants.Game.LIVES;\n  this.redrawControlsCanvas();\n  var newShip = this.newShipAtCenter();\n  newShip.visible = false;\n  this.ship = newShip;\n  this.addShipAfterDelay(newShip, 0);\n},\n\nGame.prototype.endGame = function() {\n  delete this.ship;\n  this.drawGameOver();\n};\n\nGame.prototype.drawGameOver = function() {\n  //draw Asteroids logo and text\n  var fontSize = 75;\n  this.controlsCtx.font = fontSize + \"px sans-serif\";\n  var text = \"Game Over\";\n  var textDim = this.controlsCtx.measureText(text);\n  this.controlsCtx.fillText(text, (Constants.Game.DIM_X - textDim.width)*0.5, Constants.Game.DIM_Y*0.60 - fontSize*0.5);\n\n  fontSize = 48;\n  text = \"New Game\";\n  this.controlsCtx.font = fontSize + \"px sans-serif\";\n  textDim = this.controlsCtx.measureText(text);\n  this.controlsCtx.fillText(text, (Constants.Game.DIM_X - textDim.width)*0.5, (Constants.Game.DIM_Y*0.60 + fontSize*0.5));\n\n  // click on New Game button starts the game again\n  var controlsCanvas = document.getElementById(\"controls-canvas\");\n  var listener = function (e) {\n     var loc = Util.windowToCanvas(controlsCanvas, e.clientX, e.clientY);\n     if ((loc.x > (Constants.Game.DIM_X - textDim.width)*0.5)\n        && (loc.x < textDim.width + (Constants.Game.DIM_X - textDim.width)*0.5)\n        && (loc.y > Constants.Game.DIM_Y*0.60 - fontSize*0.5)\n        && (loc.y < Constants.Game.DIM_Y*0.60 + fontSize*0.5)) {\n          this.startGame();\n          controlsCanvas.removeEventListener(\"mousedown\", listener);\n        }\n  }.bind(this);\n\n  controlsCanvas.addEventListener(\"mousedown\", listener);\n};\n\nGame.prototype.newShipAtCenter = function() {\n  var scale = Constants.Ship.SHIP_SCALE;\n  return Ship.newSpaceship(\n    {pos: Ship.getCenterPosition(),\n    game: this}\n  );\n};\n\nGame.prototype.addAsteroids = function() {\n  for (var i = 0; i < this.num_asteroids; i++) {\n    this.add(this.randomAsteroidCanvasBorder());\n  }\n};\n\nGame.prototype.splitAsteroidIntoChunks = function(asteroid) {\n  if (asteroid.scale > 0.7) {\n    for (var i = 0; i < 2; i++) {\n      this.add(RotatingAsteroid.newRotatingAsteroid(\n        {pos: [asteroid.pos[0], asteroid.pos[1]],\n         vel: Util.randomVec(Constants.Asteroid.SPEED/2),\n         scaleMin: 0.4,\n         scaleMax: 0.7,\n         chunk: true,\n         game: this}));\n    }\n  } else if ((0.4 < asteroid.scale) && (asteroid.scale <= 0.7)) {\n    for (var i = 0; i < 3; i++) {\n      this.add(RotatingAsteroid.newRotatingAsteroid(\n        {pos: [asteroid.pos[0], asteroid.pos[1]],\n         vel: Util.randomVec(Constants.Asteroid.SPEED/4),\n         scaleMin: 0.2,\n         scaleMax: 0.4,\n         chunk: true,\n         game: this}));\n    }\n  }\n  this.remove(asteroid);\n};\n\nGame.prototype.allObjects = function() {\n  if (this.ship && this.ship.visible === true) {\n    return [].concat(this.asteroids, this.asteroidChunks, this.bullets, this.sprites, this.ship);\n  } else {\n    return [].concat(this.asteroids, this.asteroidChunks, this.bullets, this.sprites);\n  }\n};\n\nGame.prototype.add = function(object) {\n\n  if (object.type === \"Asteroid\") {\n    if (object.chunk === false) {\n      this.asteroids.push(object);\n    } else {\n      this.asteroidChunks.push(object);\n    }\n  } else if (object.type === \"Bullet\") {\n    this.bullets.push(object);\n  } else if (object.type === \"Ship\") {\n    object.visible = true;\n  } else if (object.type === \"Sprite\") {\n    this.sprites.push(object);\n  }\n\n};\n\nGame.prototype.randomAsteroid = function() {\n  return RotatingAsteroid.newRotatingAsteroid({pos: this.randomPosition(), game: this, scale: 0.8});\n};\n\nGame.prototype.randomAsteroidCanvasBorder = function() {\n  return RotatingAsteroid.newRotatingAsteroid({pos: this.randomPositionOnBorders(), game: this, scale: 0.8});\n},\n\nGame.prototype.randomPosition = function() {\n  return [Math.random()*Constants.Game.DIM_X, Math.random()*Constants.Game.DIM_Y];\n};\n\nGame.prototype.randomPositionOnBorders = function() {\n  var borders = [\"x\", \"y\"];\n  var border = borders[Util.randomInteger(0,1)];\n  var pos;\n  if (border === \"y\") {\n    pos = [[0 - Constants.Game.CANVAS_BORDER, Constants.Game.DIM_X][Util.randomInteger(0,1)], Math.random()*Constants.Game.DIM_Y];\n  } else {\n    pos = [Math.random()*Constants.Game.DIM_X, [0 - Constants.Game.CANVAS_BORDER, Constants.Game.DIM_Y][Util.randomInteger(0,1)]];\n  }\n  return pos;\n},\n\nGame.prototype.drawLives = function() {\n  var life = new Sprite({\n    pos: [20,20],\n    game: this,\n    spritePos: [0,0],\n    image: AssetRepository.getAsset(AssetPaths.spaceShip),\n    width: 810,\n    height: 495,\n    speed: 0,\n    scale: 0.05,\n    frames: [[0,0]],\n    once: false});\n  // rotate image: spaceship image is horizontal initially, we need it to be vertical\n  this.controlsCtx.save();\n  this.controlsCtx.translate(life.pos[0]+life.width*life.scale*0.5, life.pos[1]+life.height*life.scale*0.5);\n  this.controlsCtx.rotate(-Math.PI/2);\n  this.controlsCtx.translate(-(life.pos[0]+life.width*life.scale*0.5), -(life.pos[1]+life.height*life.scale*0.5));\n  for (var i = 0; i < this.lives; i++) {\n    life.pos = [20, (i+1)*25];\n    life.draw(this.controlsCtx);\n  }\n  this.controlsCtx.restore();\n};\n\nGame.prototype.draw = function(timeDelta) {\n  var allObjects = this.allObjects();\n\n  this.mainCtx.clearRect(0, 0, Constants.Game.DIM_X, Constants.Game.DIM_Y);\n  // controlsCtx.clearRect(0, 0, Constants.Game.DIM_X, Constants.Game.DIM_Y);\n\n  for (var i = 0; i < allObjects.length; i++) {\n    if (allObjects[i].type === \"Ship\") {\n      allObjects[i].draw(this.mainCtx, timeDelta);\n    } else if (allObjects[i].type === \"Sprite\") {\n      allObjects[i].draw(this.mainCtx, timeDelta);\n    } else {\n      allObjects[i].draw(this.mainCtx, timeDelta);\n    }\n  }\n\n  if (this.gameStarted === true) {\n    this.mainCtx.font = \"48px sans-serif\";\n    this.mainCtx.fillStyle = \"white\";\n    this.mainCtx.fillText(this.score, 50, 550);\n  }\n};\n\nGame.prototype.moveObjects = function(delta) {\n  var allObjects = this.allObjects();\n\n  for (var i = 0; i < allObjects.length; i++) {\n    allObjects[i].move(delta);\n  }\n};\n\nGame.prototype.checkCollisions = function() {\n  var allObjects = this.allObjects();\n  for (var i = 0; i < allObjects.length; i++) {\n    for (var j = 0; j < allObjects.length; j++) {\n      if (allObjects[i] == allObjects[j]) {\n        continue;\n      }\n      if (allObjects[i].isCollidedWith(allObjects[j])) {\n        allObjects[i].collideWith(allObjects[j]);\n      }\n    }\n  }\n};\n\nGame.prototype.increaseScore = function() {\n  this.score += 10;\n};\n\nGame.prototype.shipCrash = function(ship, otherObject) {\n\n  if (otherObject.type === \"Asteroid\") {\n    this.remove(ship);\n    this.splitAsteroidIntoChunks(otherObject);\n    var explosion = NewSprites.newExplosion({pos: ship.pos, game: this});\n    this.add(explosion);\n    ship.resetAtCenter();\n  }\n\n  this.redrawControlsCanvas();\n  if (this.lives > 0) {\n    this.addShipAfterDelay(ship, 3000);\n  } else {\n    this.endGame();\n  }\n};\n\nGame.prototype.addShipAfterDelay = function(ship, delay) {\n  window.setTimeout(function() {\n    this.add(ship);\n    ship.immune = true;\n    this.removeImmunityAfterDelay(ship);\n  }.bind(this), delay);\n};\n\nGame.prototype.removeImmunityAfterDelay = function(ship) {\n  window.setTimeout(function() {\n    ship.immune = false;\n  }.bind(this), 2000);\n};\n\nGame.prototype.redrawControlsCanvas = function() {\n  this.clearControlsCanvas();\n  this.drawLives();\n};\n\nGame.prototype.clearControlsCanvas = function() {\n  this.controlsCtx.clearRect(0, 0, Constants.Game.DIM_X, Constants.Game.DIM_Y);\n};\n\nGame.prototype.step = function(timeDelta, time) {\n  this.time = time;\n  //this.ship.slowDownShip();\n  this.moveObjects(timeDelta);\n  this.checkCollisions();\n};\n\nGame.prototype.remove = function(object) {\n\n  if (object.type === \"Asteroid\") {\n    if (object.chunk === false) {\n      var idx = this.asteroids.indexOf(object);\n      this.asteroids[idx] = this.randomAsteroidCanvasBorder();\n    } else {\n      this.asteroidChunks.splice(this.asteroidChunks.indexOf(object), 1);\n    }\n  } else if (object.type === \"Bullet\") {\n      this.bullets.splice(this.bullets.indexOf(object), 1);\n  } else if (object.type === \"Ship\") {\n      if (this.ship != undefined) {\n      this.ship.visible = false;\n      this.lives -= 1;\n    }\n  } else if (object.type === \"Sprite\") {\n     this.sprites.splice(this.sprites.indexOf(object), 1);\n  }\n};\n\nGame.prototype.wrap = function(pos) {\n  var newPos = pos.slice();\n\n  if (pos[0] > (Constants.Game.DIM_X)) {\n    newPos[0] = 0 - Constants.Game.CANVAS_BORDER;\n  } else if (pos[0] < 0 - Constants.Game.CANVAS_BORDER) {\n    newPos[0] = Constants.Game.DIM_X;\n  }\n\n  if (pos[1] > Constants.Game.DIM_Y) {\n    newPos[1] = 0 - Constants.Game.CANVAS_BORDER;\n  } else if (pos[1] < (0 - Constants.Game.CANVAS_BORDER)) {\n    newPos[1] = Constants.Game.DIM_Y;\n  }\n\n  return newPos;\n\n};\n\nGame.prototype.isOutOfBounds = function(pos) {\n\n  if (pos[0] > Constants.Game.DIM_X || pos[0] < 0 || pos[1] > Constants.Game.DIM_Y || pos[1] < 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nmodule.exports = Game;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/game.js\n ** module id = 2\n ** module chunks = 0\n **/","var AssetRepository = function() {\n  this.successCount = 0;\n  this.errorCount = 0;\n  this.cache = {};\n  this.downloadQueue = [];\n};\n\nAssetRepository.prototype.queueDownload = function(path) {\n  this.downloadQueue.push(path);\n};\n\nAssetRepository.prototype.downloadAll = function(downloadCallback) {\n  if (this.downloadQueue.length === 0) {\n    downloadCallback();\n  }\n\n  for (var i = 0; i < this.downloadQueue.length; i++) {\n      var path = this.downloadQueue[i];\n      var img = new Image();\n      var that = this;\n      img.addEventListener(\"load\", function() {\n          that.successCount += 1;\n          if (that.isDone()) {\n              downloadCallback();\n          }\n      }, false);\n      img.addEventListener(\"error\", function() {\n          that.errorCount += 1;\n          if (that.isDone()) {\n              downloadCallback();\n          }\n      }, false);\n      img.src = path;\n      this.cache[path] = img;\n  }\n};\n\nAssetRepository.prototype.isDone = function() {\n    return (this.downloadQueue.length === this.successCount + this.errorCount);\n};\n\nAssetRepository.prototype.getAsset = function(path) {\n    return this.cache[path];\n};\n\nmodule.exports = new AssetRepository;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/assetRepository.js\n ** module id = 3\n ** module chunks = 0\n **/","var AssetPaths = {\n  background: \"./imgs/bgg.jpg\",\n  spaceShip: \"./imgs/spaceship.png\",\n  asteroidSprite: \"./imgs/asteroids.png\",\n  asteroidExplosion: \"./imgs/asteroidExplosion.png\",\n  bullet: \"./imgs/bullet_strip.png\"\n};\n\nmodule.exports = AssetPaths;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/assetPaths.js\n ** module id = 4\n ** module chunks = 0\n **/","var Asteroid = require(\"./asteroid\");\nvar Util = require(\"./util\");\nvar AssetRepository = require(\"./assetRepository\");\nvar AssetPaths = require(\"./assetPaths\");\n\n// Constructor for an Asteroid that rotates based on canvas rotate, not on\n// multiple sprite sheet images\nfunction RotatingAsteroid (options) {\n  this.time = 0;\n  this.rotationDirection = [-1,1][Util.randomInteger(0,1)];\n  Asteroid.call(this, options);\n}\n\nUtil.inherits(RotatingAsteroid, Asteroid);\n\nRotatingAsteroid.newRotatingAsteroid = function(options) {\n  var scale = options.scale || (Asteroid.scaleAsteroidMinMax(options.scaleMin, options.scaleMax)\n              || Asteroid.scaleAsteroid());\n  var randomSpriteX = Util.randomInteger(0,6);\n  var randomSpriteY = Util.randomInteger(0,7);\n  return new RotatingAsteroid({\n    pos: options.pos,\n    vel: options.vel,\n    game: options.game,\n    spritePos: [0,0],\n    image: AssetRepository.getAsset(AssetPaths.asteroidSprite),\n    width: 128,\n    height: 128,\n    speed: 10,\n    scale: scale,\n    frames: [[randomSpriteX, randomSpriteY]],\n    once: false,\n    chunk: options.chunk});\n};\n\nRotatingAsteroid.prototype.draw = function(ctx, timeDelta) {\n  this.time += timeDelta;\n  // rotate the asteroid around it's center point\n\tctx.save();\n\tctx.translate(this.pos[0]+this.width*this.scale*0.5, this.pos[1]+this.height*this.scale*0.5);\n\tctx.rotate(this.rotationDirection*this.time / 1000);\n\tctx.translate(-(this.pos[0]+this.width*this.scale*0.5), -(this.pos[1]+this.height*this.scale*0.5));\n\t// call superclass's draw method (Sprite.draw)\n\tObject.getPrototypeOf(this.constructor.prototype).draw.bind(this)(ctx, timeDelta);\n\tctx.restore();\n};\n\nmodule.exports = RotatingAsteroid;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/rotatingAsteroid.js\n ** module id = 5\n ** module chunks = 0\n **/","var Util = require(\"./util\");\nvar Sprite = require(\"./sprite\");\nvar Constants = require(\"./constants\");\nvar AssetRepository = require(\"./assetRepository\");\nvar AssetPaths = require(\"./assetPaths\");\n\nfunction Asteroid (options) {\n  // options.color = DEFAULTS.COLOR;\n  // options.radius = options.radius;\n  options.vel = Util.randomVec(Constants.Asteroid.SPEED);\n\tthis.chunk = options.chunk || false;\n\n  Sprite.call(this, options);\n\n}\n\nUtil.inherits(Asteroid, Sprite);\n\nAsteroid.scaleAsteroid = function() {\n  return Math.random()*0.8 + 0.2;\n};\n\nAsteroid.scaleAsteroidMinMax = function(min, max) {\n  if ((min === undefined) || (max === undefined) || (min > max)) {\n    return;\n  }\n  return Math.random()*((max - min)) + min;\n};\n\nAsteroid.newAsteroid = function(options) {\n  var scale = (this.scaleAsteroidMinMax(options.min, options.max)\n              || this.scaleAsteroid());\n  return new Asteroid({pos: options.pos,\n    game: options.game,\n    spritePos: [0,0],\n    image: AssetRepository.getAsset(AssetPaths.asteroidSprite),\n    width: 128,\n    height: 128,\n    speed: 10,\n    scale: scale,\n    frames: [[0,0], [0,1], [0,2], [0,3], [0,4], [0,5], [0,6], [0,7],\n             [1,0], [1,1], [1,2], [1,3], [1,4], [1,5], [1,6], [1,7],\n             [2,0], [2,1], [2,2], [2,3], [2,4], [2,5], [2,6], [2,7],\n             [3,0], [3,1], [3,2], [3,3], [3,4], [3,5], [3,6], [3,7]],\n    once: false});\n};\n\nAsteroid.prototype.collideWith = function(otherObject) {\n  if (otherObject.type === \"Ship\") {\n    otherObject.relocate();\n  }\n};\n\nAsteroid.prototype.type = \"Asteroid\";\n\nmodule.exports = Asteroid;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/asteroid.js\n ** module id = 6\n ** module chunks = 0\n **/","var Util = {\n\n  inherits: function (ChildClass, BaseClass) {\n    var Surrogate = function() { this.constructor = ChildClass; };\n    Surrogate.prototype = BaseClass.prototype;\n    ChildClass.prototype = new Surrogate();\n  },\n\n  // Return a randomly oriented vector with the given length.\n  randomVec: function(length) {\n    var deg = 2 * Math.PI * Math.random();\n\n    var rv = Util.scale([Math.sin(deg), Math.cos(deg)], length);\n    return rv;\n  },\n\n  newVec: function(deg, length) {\n    var rv = Util.scale([Math.sin(deg), Math.cos(deg)], length);\n    return rv;\n  },\n\n  // Scale the length of a vector by the given amount.\n  scale: function (vec, m) {\n    return [vec[0] * m, vec[1] * m];\n  },\n\n// Normalize the length of the vector to 1, maintaining direction.\n  dir: function (vec) {\n    var norm = Util.norm(vec);\n    return Util.scale(vec, 1 / norm);\n  },\n\n// Find distance between two points.\n  dist: function (pos1, pos2) {\n    return Math.sqrt(\n      Math.pow(pos1[0] - pos2[0], 2) + Math.pow(pos1[1] - pos2[1], 2)\n    );\n  },\n\n// Find the length of the vector.\n  norm: function (vec) {\n    return Util.dist([0, 0], vec);\n  },\n\n  randomInteger: function(min, max) {\n    if (min > max) {\n      return;\n    }\n\n    var diff = max - min;\n    return Math.floor(Math.random()*(diff + 1) + min);\n  },\n\n  arrayRotate: function(arr, reverse, times) {\n    for (var i = 0; i < times; i++) {\n      if(reverse)\n        arr.unshift(arr.pop());\n      else\n        arr.push(arr.shift());\n    }\n    return arr;\n  },\n\n  windowToCanvas: function(canvas, x, y) {\n     var rect = canvas.getBoundingClientRect();\n\n     return { x: x - rect.left,\n              y: y - rect.top\n            };\n  }\n\n};\n\nmodule.exports = Util;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/util.js\n ** module id = 7\n ** module chunks = 0\n **/","var MovingObject = require(\"./movingObject\");\nvar Util = require(\"./util\");\n\nfunction Sprite (options) {\n    this.spritePos = options.spritePos;\n    this.image = options.image;\n    this.width = options.width;\n    this.height = options.height;\n    this.speed = typeof options.speed === 'number' ? options.speed : 0;\n    this.frames = options.frames;\n    this._index = 0;\n    this.scale = options.scale || 1;\n    this.once = options.once;\n    this.done = false;\n\n    options.radius = this.scaledWidth()*0.45;\n\n    MovingObject.call(this, options);\n}\n\nUtil.inherits(Sprite, MovingObject);\n\nSprite.prototype.update = function (timeDelta, pos) {\n  if (this.done === true) {\n    this.game.remove(this);\n  }\n  this._index += this.speed*(timeDelta/1000);\n  // this.pos = pos;\n};\n\nSprite.prototype.scaledWidth = function() {\n  return this.width*this.scale;\n};\n\nSprite.prototype.scaledHeight = function() {\n  return this.height*this.scale;\n};\n\nSprite.prototype.draw = function (ctx, timeDelta) {\n  this.update(timeDelta, this.pos);\n  if (this.done === true) {\n    return;\n  }\n\n  var frame;\n\n  if (this.speed > 0) {\n    var max = this.frames.length;\n    var idx = Math.floor(this._index);\n    frame = this.frames[idx % max];\n    if (this.once && idx >= max) {\n      this.done = true;\n      return;\n    }\n  } else {\n    frame = [0,0];\n  }\n\n  var x = this.spritePos[0];\n  var y = this.spritePos[1];\n\n  x += frame[1] * this.width;\n  y += frame[0] * this.height;\n\n  // Draw the animation\n  ctx.drawImage(this.image,\n               x, y,\n               this.width, this.height,\n               this.pos[0], this.pos[1],\n               this.scaledWidth(), this.scaledHeight());\n};\n\nSprite.prototype.type = \"Sprite\";\n\nmodule.exports = Sprite;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/sprite.js\n ** module id = 8\n ** module chunks = 0\n **/","var Constants = require(\"./constants\");\n\nvar MovingObject = function (options) {\n  this.pos = options.pos || options.game.randomPosition();  // two element array\n  this.vel = options.vel; // two element array\n  this.radius = options.radius;\n  this.color = options.color;\n  this.game = options.game;\n};\n\nMovingObject.prototype.isWrappable = true;\n\nMovingObject.prototype.draw = function(mainCtx) {\n  mainCtx.fillStyle = this.color;\n  mainCtx.beginPath();\n\n  mainCtx.arc(\n    this.pos[0],\n    this.pos[1],\n    this.radius,\n    0,\n    2 * Math.PI,\n    false\n  );\n\n  mainCtx.fill();\n};\n\n// var NORMAL_FRAME_TIME_DELTA = 1000/60;\nMovingObject.prototype.move = function(timeDelta) {\n  //timeDelta is number of milliseconds since last move\n  //if the computer is busy the time delta will be larger\n  //in this case the MovingObject should move farther in this frame\n  //velocity of object is how far it should move in 1/60th of a second\n  var velocityScale = timeDelta / Constants.MovingObject.NORMAL_FRAME_TIME_DELTA;\n  var offsetX = this.vel[0] * velocityScale;\n  var offsetY = this.vel[1] * velocityScale;\n\n  this.pos = [this.pos[0] + offsetX, this.pos[1] + offsetY];\n\n  if (this.isWrappable === true) {\n    this.pos = this.game.wrap(this.pos);\n  } else {\n    if (this.game.isOutOfBounds(this.pos) === true) {\n      this.game.remove(this);\n    }\n  }\n  // console.log(this.pos);\n};\n\n// Find distance to other object (Pythagoras)\nMovingObject.prototype.distance = function(otherObject) {\n  return Math.sqrt(\n    Math.pow((this.pos[0] + this.radius) - (otherObject.pos[0] + otherObject.radius), 2)\n    + Math.pow((this.pos[1]+ this.radius) - (otherObject.pos[1] + otherObject.radius), 2));\n};\n\nMovingObject.prototype.isCollidedWith = function(otherObject) {\n  if (otherObject.type === \"Asteroid\")\n  if (this.distance(otherObject) <= (this.radius + otherObject.radius)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nMovingObject.prototype.collideWith = function(otherObject) {\n\n};\n\nmodule.exports = MovingObject;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/movingObject.js\n ** module id = 9\n ** module chunks = 0\n **/","var Constants = {\n  Asteroid: {\n  \tCOLOR: \"#505050\",\n  \tRADIUS: 50,\n  \tSPEED: 0.5\n  },\n  \n  Game: {\n    DIM_X: 1000,\n    DIM_Y: 600,\n    CANVAS_BORDER: 128,\n    LIVES: 3\n  },\n\n  MovingObject: {\n    NORMAL_FRAME_TIME_DELTA: 1000/60\n  },\n\n  Ship: {\n    DIRECTION_CHANGE_SPEED: Math.PI/30,\n    POWER: 0.20,\n    FIRE_BULLET_INTERVAL: 100,\n    SHIP_SPRITE_WIDTH: 810,\n    SHIP_SPRITE_HEIGHT: 495,\n    SHIP_SCALE: 0.1\n  },\n\n  GameView: {\n    MOVES: {\n      \"up\": +1,\n      \"left\": Math.PI/6,\n      \"down\": -1,\n      \"right\": -Math.PI/6,\n    }\n  },\n\n  Bullet: {\n    RADIUS: 3,\n    SPEED: 15,\n    BULLET_SPRITE_WIDTH: 39\n  }\n};\n\nmodule.exports = Constants;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/constants.js\n ** module id = 10\n ** module chunks = 0\n **/","var Sprite = require(\"./sprite\");\nvar Util = require(\"./util\");\nvar Bullet = require(\"./bullet\");\nvar Constants = require(\"./constants\");\nvar AssetRepository = require(\"./assetRepository\");\nvar AssetPaths = require(\"./assetPaths\");\n\nvar Ship = function(options) {\n  this.direction = Math.PI / 2;\n  this.visible = true;\n  this.immune = false;\n  this.lastBulletFired = options.game.time;\n  options.vel = [0,0],\n  Sprite.call(this, options);\n};\n\nUtil.inherits(Ship, Sprite);\n\nShip.prototype.type = \"Ship\";\n\nShip.newSpaceship = function(options) {\n  return new Ship({\n    pos: options.pos,\n    game: options.game,\n    spritePos: [0,0],\n    image: AssetRepository.getAsset(AssetPaths.spaceShip),\n    width: Constants.Ship.SHIP_SPRITE_WIDTH,\n    height: Constants.Ship.SHIP_SPRITE_HEIGHT,\n    speed: 0,\n    scale: options.scale || Constants.Ship.SHIP_SCALE,\n    frames: [[0,0]],\n    once: false});\n};\n\nShip.prototype.resetAtCenter = function() {\n  this.direction = Math.PI/2;\n  this.vel = [0,0];\n  this.pos = Ship.getCenterPosition();\n};\n\nShip.prototype.collideWith = function(otherObject) {\n  if (this.immune === false && otherObject.type === \"Asteroid\") {\n    this.game.shipCrash(this, otherObject);\n  }\n};\n\nShip.getCenterPosition = function() {\n  return [(Constants.Game.DIM_X\n          - Constants.Ship.SHIP_SPRITE_WIDTH*Constants.Ship.SHIP_SCALE)*0.5,\n         (Constants.Game.DIM_Y\n          - Constants.Ship.SHIP_SPRITE_HEIGHT*Constants.Ship.SHIP_SCALE)*0.5];\n};\n\nShip.prototype.power = function(impulse) {\n  this.vel[0] += impulse*Math.cos(this.direction);\n  this.vel[1] += -impulse*Math.sin(this.direction);\n};\n\nShip.prototype.slowDownShip = function() {\n  this.vel = Util.scale(this.vel, 0.96);\n};\n\n// Ship.prototype.draw = function(shipCtx) {\n//   shipCtx.beginPath();\n//\n//   shipCtx.moveTo(this.pos[0] + 10*Math.cos(this.direction),\n//     this.pos[1] - 10*Math.sin(this.direction));\n//   shipCtx.lineTo(this.pos[0] + 10*Math.cos(this.direction\n//     + Math.PI - Math.PI/8), this.pos[1] - 10*Math.sin(this.direction\n//       + Math.PI - Math.PI/8));\n//   shipCtx.lineTo(this.pos[0] + 10*Math.cos(this.direction + Math.PI\n//     + Math.PI/8), this.pos[1] - 10*Math.sin(this.direction + Math.PI\n//       + Math.PI/8));\n//   shipCtx.closePath();\n//   shipCtx.strokeStyle=\"red\";\n//   shipCtx.stroke();\n//   //shipCtx.drawImage(imageRepository.spaceship, this.pos[0], this.pos[1]);\n// };\n\nShip.prototype.draw = function(mainCtx, timeDelta) {\n  this.time += timeDelta;\n  // rotate the ship around it's center point\n  mainCtx.save();\n  mainCtx.translate(this.pos[0]+this.width*this.scale*0.5, this.pos[1]+this.height*this.scale*0.5);\n  mainCtx.rotate(-this.direction);\n  mainCtx.translate(-(this.pos[0]+this.width*this.scale*0.5), -(this.pos[1]+this.height*this.scale*0.5));\n  // call superclass's draw method (Sprite.draw)\n  Object.getPrototypeOf(this.constructor.prototype).draw.bind(this)(mainCtx, timeDelta);\n  mainCtx.restore();\n};\n\nShip.prototype.move = function(timeDelta) {\n  Object.getPrototypeOf(this.constructor.prototype).move.bind(this)(timeDelta);\n  var directionScale = timeDelta / Constants.MovingObject.NORMAL_FRAME_TIME_DELTA;\n  if (key.isPressed(\"right\")) {\n    this.direction -= directionScale*Constants.Ship.DIRECTION_CHANGE_SPEED;\n  } else if (key.isPressed(\"left\")) {\n    this.direction += directionScale*Constants.Ship.DIRECTION_CHANGE_SPEED;\n  }\n  if (key.isPressed(\"up\")) {\n    this.power(Constants.Ship.POWER);\n  }\n  if (key.isPressed(\"down\")) {\n    this.power(-Constants.Ship.POWER);\n  }\n  if (key.isPressed(\"space\")) {\n    if (this.game.time - this.lastBulletFired > Constants.Ship.FIRE_BULLET_INTERVAL) {\n      this.fireBullet();\n      this.lastBulletFired = this.game.time;\n    }\n  }\n  this.slowDownShip();\n};\n\nShip.prototype.fireBullet = function() {\n\n  var direction_vector = [Math.cos(this.direction), -Math.sin(this.direction)];\n\n  // relative velocity vector of the bullet is the normalized velocity vector\n  // times the Bullet.SPEED constant\n  var relVel = Util.scale(\n    Util.dir(direction_vector),\n    Constants.Bullet.SPEED\n  );\n\n  // bullet velocity adds the ship's velocity to the bullet's default speed\n  var bulletVel = [\n    relVel[0] + this.vel[0], relVel[1] + this.vel[1]\n  ];\n\n  var options = {\n    pos: [this.pos[0] + this.scaledWidth()*0.5 - Constants.Bullet.BULLET_SPRITE_WIDTH*0.5,\n          this.pos[1] + this.scaledHeight()*0.5 - Constants.Bullet.BULLET_SPRITE_WIDTH*0.5],\n    vel: bulletVel,\n    game: this.game\n  };\n\n  var bullet = newBullet(options);\n\n  this.game.add(bullet);\n};\n\nvar newBullet = function(options) {\n  return new Bullet({\n    pos: options.pos,\n    vel: options.vel,\n    game: options.game,\n    spritePos: [0,0],\n    image: AssetRepository.getAsset(AssetPaths.bullet),\n    width: Constants.Bullet.BULLET_SPRITE_WIDTH,\n    height: Constants.Bullet.BULLET_SPRITE_WIDTH,\n    speed: 0,\n    scale: 1,\n    frames: [[0,0]],\n    once: false});\n};\n\nmodule.exports = Ship;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/ship.js\n ** module id = 11\n ** module chunks = 0\n **/","var Util = require(\"./util\");\nvar Sprite = require(\"./sprite\");\nvar NewSprites = require(\"./newSprites\");\nvar Constants = require(\"./constants\");\n\nvar Bullet = function(options) {\n  options.radius = Constants.Bullet.RADIUS;\n  Sprite.call(this, options);\n};\n\nUtil.inherits(Bullet, Sprite);\n\nBullet.prototype.isWrappable = false;\nBullet.prototype.type = \"Bullet\";\n\nBullet.prototype.collideWith = function(otherObject) {\n  if (otherObject.type === \"Asteroid\") {\n    this.game.remove(this);\n    this.game.splitAsteroidIntoChunks(otherObject);\n    var explosion = NewSprites.newExplosion({pos:otherObject.pos, game: this.game, scale: 1}); //scale: otherObject.scale});\n    this.game.add(explosion);\n    this.game.increaseScore();\n  }\n};\n\nmodule.exports = Bullet;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/bullet.js\n ** module id = 12\n ** module chunks = 0\n **/","var Asteroid = require(\"./asteroid\");\nvar RotatingAsteroid = require(\"./rotatingAsteroid\");\nvar Sprite = require(\"./sprite\");\nvar AssetRepository = require(\"./assetRepository\");\nvar AssetPaths = require(\"./assetPaths\");\nvar Util = require(\"./util\");\nvar Ship = require(\"./ship\");\n\nvar NewSprites = {\n  newExplosion: function(options) {\n    return new Sprite({\n        vel: [0,0],\n        radius: 0,\n        pos: options.pos,\n        game: options.game,\n        spritePos: [0,0],\n        image: AssetRepository.getAsset(AssetPaths.asteroidExplosion),\n        width: 64,\n        height: 64,\n        speed: 30,\n        scale: options.scale || 1,\n        frames: [[0,0], [0,1], [0,2], [0,3], [0,4],\n                 [1,0], [1,1], [1,2], [1,3], [1,4],\n                 [2,0], [2,1], [2,2], [2,3], [2,4],\n                 [3,0], [3,1], [3,2], [3,3], [3,4],\n                 [4,0], [4,1], [4,2], [4,3], [4,4]],\n        once: true});\n  },\n};\n\nmodule.exports = NewSprites;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/newSprites.js\n ** module id = 13\n ** module chunks = 0\n **/"],"sourceRoot":""}